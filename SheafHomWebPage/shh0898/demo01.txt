
                         SHEAFHOM TUTORIAL

Sheafhom provides the user with a category of combinatorial sheaves
and morphisms of sheaves.  It is intended for research involving
complexes of sheaves and the derived category.  In principle, it can
be used for any space topologically equivalent to a ranked poset; for
instance, one could work in the derived category of constructible
sheaves on any finite simplicial complex or regular cell complex.  So
far, Sheafhom has been developed mostly for toric varieties and the
intersection cohomology sheaves on them.

Throughout the tutorial, we will work with toric varieties over the
complex numbers.  They will be normal, but not necessarily smooth, or
projective.  They need not be complete (though the fan should be
connected in codimension one).

This file contains text mingled with lines from an interactive session
with Macaulay 2.  Lines of input typed by the user begin with i
followed by a number.  The output, if any, begins with o and the
corresponding number.

Let's start up the session.  Littlewood is a SparcServer 1000 with
four independent processors and 192M of RAM.

littlewood:/w/mmcconn/M2{41}: M2
Macaulay 2, version 0.8.45
  Copyright 1993-1998, all rights reserved, D. R. Grayson and M. E. Stillman
  Factory 1.2c from Singular, copyright 1993-1997, G.-M. Greuel, R. Stobbe
  Factorization and characteristic sets 0.3.1, copyright 1996, M. Messollen
  GC, copyright 1996, Hans-J. Boehm, Alan J. Demers, Xerox, Silicon Graphics
  GNU libc and libg++, copyright 1996, Free Software Foundation
  GNU MP, copyright 1996, Free Software Foundation

The following command loads the Sheafhom code if it hasn't been loaded
already.

i1 : load "shh.m2"
--loaded shh.m2

%%%%%%%%%%%%%%% COHOMOLOGY OF A SINGULAR VARIETY %%%%%%%%%%%%%%%

A toric variety of complex dimension n is determined by a fan, which
is a partition of R^n (or a subset of R^n) into unbounded polyhedral
cones with vertex at the origin and generated by rational vectors.
For instance, the complex projective plane P^2 is generated by this
fan:

               |
               |
               |
               |
               |
               .---------
              /
             /
            /
           /
          /

The tutorial will focus on one particular 3-dimensional toric variety X,
whose fan is called "octah".  Take a standard cube in R^3 centered at
the origin, and form the cones over its six faces, using the origin as
the vertex.  This partitions R^3 into a fan with six 3-dimensional
cones, together with all their faces.  (The underlying lattice is the
standard Z^3 in R^3.)  The fan is called "octah" because the the cube
is dual to the octahedron: the fan is the normal fan to the regular
octahedron, and the image of X under the moment map is the octahedron.

To define the fan in Sheafhom, we define vectors generating the
vertices of the cube.

i2 : v0 = { 1, 1, 1};

i3 : v1 = {-1, 1, 1};

i4 : v2 = { 1,-1, 1};

i5 : v3 = {-1,-1, 1};

i6 : v4 = { 1, 1,-1};

i7 : v5 = {-1, 1,-1};

i8 : v6 = { 1,-1,-1};

i9 : v7 = {-1,-1,-1};

We make a cone using   cone {...} .

i10 : sigma0 = cone{v0,v1,v2,v3}

o10 = set {{-1, 1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, -1, 1}}

o10 : Cone

We make a fan by applying "fan" to a list of cones.

i11 : octah = fan {
  cone{v0,v1,v2,v3}, cone{v0,v1,v4,v5}, cone{v0,v2,v4,v6},
  cone{v1,v3,v5,v7}, cone{v2,v3,v6,v7}, cone{v4,v5,v6,v7}
  }

o11 = set {set {{1, -1, -1}, {0, 0, 0}}, set {{-1, -1, 1}, {0, 0, 0}}, set {{1, 1, 1}, {0, 0, 0}}, set {{-1, 1, 1}, {-1, 1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {1, -1, -1}, {0, 0, 0}}, set {{1, 1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {1, 1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {1, 1, -1}, {1, 1, 1}, {1, -1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, 1, -1}, {1, 1, 1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{-1, 1, 1}, {-1, -1, -1}, {-1, 1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {-1, -1, -1}, {1, -1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {-1, -1, -1}, {1, -1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, -1, -1}, {0, 0, 0}}, set {{-1, 1, -1}, {0, 0, 0}}, set {{0, 0, 0}}, set {{-1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {1, -1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {1, 1, 1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, 1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {1, -1, -1}, {0, 0, 0}}}

o11 : Fan

We see octah contains all the cones we gave it, plus all of their
faces.  The zero vector has been added to each cone in order to avoid
some problems with the empty cone.

Now let's compute the cohomology H^*(X) of X.  Intersection cohomology
is the hypercohomology of a complex of sheaves on X.  We'll let ICz be
the intersection cohomology complex of sheaves (the "IC sheaf") in
perversity zero.  The hypercohomology of ICz is simply the ordinary
cohomology H^*(X).  For technical reasons, we use rational
coefficients, though our algorithms are generally defined over Z.

We create ICz using the operator ictvSheaf (ictv = intersection
cohomology of toric varieties.)

i12 : ICz = ictvSheaf (octah, Perversity => zeroPerversity)

o12 = IctvSheaf{...}

o12 : IctvSheaf

The next line computes the cohomology of X and sets HX equal to it.
The "time" function reports how long the computation takes.

i13 : time (HX = hypercohomology ICz)
     -- used 914.91 seconds

        1              5       2       1              1
o13 = QQ  <-- 0  <-- QQ  <-- QQ  <-- QQ  <-- 0  <-- QQ
                                                    
      -6      -5     -4      -3      -2      -1     0

o13 : ChainComplex

The term in degree -i is the cohomology H^i.  Recall that QQ is
Macaulay 2's symbol for the rationals.  The arrows are trivial zero
maps.

As always, the cohomology of X is a ring.  We will compute its ring
structure below.

%%%%%%%%%%%%%%% INTERSECTION COHOMOLOGY %%%%%%%%%%%%%%%

"Intersection cohomology" usually means middle-perversity intersection
cohomology, denoted IHm^*(X), or IH^*(X) for short.  These groups
satisfy Poincare duality, even for singular spaces; for complex
projective varieties, they satisfy Hard Lefschetz and have other
important properties.

Let's compute this for octah.  Our variety X is singular at six points
corresponding to the six vertices of the octahedron.  (X is also
singular along curves corresponding to the edges of the octahedron,
but these singularities are so mild topologically that we will ignore
them when working over the rationals.)

We construct the middle-perversity complex of sheaves.

i14 : ICm = ictvSheaf (octah, Perversity => middlePerversity)

o14 = IctvSheaf{...}

o14 : IctvSheaf

Here is the intersection cohomology:

i15 : time IHX = hypercohomology ICm
     -- used 1054.29 seconds

        1              5              5              1
o15 = QQ  <-- 0  <-- QQ  <-- 0  <-- QQ  <-- 0  <-- QQ
                                                   
      -6      -5     -4      -3     -2      -1     0

o15 : ChainComplex

%%%%%%%%%%%%%%% CHOW (CO)HOMOLOGY %%%%%%%%%%%%%%%

Because perversity zero is less than middle perversity, there is a
canonical map from H^*(X) to IH^*(X).  We'll begin by discussing one
reason it's important; we will see more canonical maps below in the
section on pairings.

One difficulty with singular varieties is that not all their
cohomology is algebraic.  For instance, while the cohomology of X is

i16 : HX

        1              5       2       1              1
o16 = QQ  <-- 0  <-- QQ  <-- QQ  <-- QQ  <-- 0  <-- QQ
                                                    
      -6      -5     -4      -3      -2      -1     0

o16 : ChainComplex

the Chow ring A_*(X) is only

        1              5               1              1
      QQ             QQ              QQ             QQ ,

because the cohomology H^3 is not supported on algebraic cycles.

The operational Chow cohomology of a variety Y, defined by Fulton and
MacPherson, is a ring A^*(Y) with the formal properties of a
"cohomology version" of the Chow ring A_*(Y).  Fulton, MacPherson,
Sottile and Sturmfels have shown that, for a class of varieties
including complete toric varieties, the operational Chow cohomology is
actually dual to the Chow ring.  On a similar class of varieties, Burt
Totaro showed that there is a weight decomposition on H^*(Y) in which
the operational Chow cohomology is the weight 2i piece of H^{2i}, and
the rest of the weights on H^*(Y) do not appear in the operational
Chow cohomology.  McConnell has recently shown that, for complete
toric varieties, the canonical map from H^*(Y) to IH^*(Y) is injective
on the operational Chow cohomology and kills the rest of H^*(Y).
Since Sheafhom can compute this canonical map, it can compute the
operational Chow cohomology of complete toric varieties, with its ring
structure.

Let's carry this out for our example X.  Here is the canonical map on
IC sheaves from ICz to ICm (from zero to middle perversity).

i17 : mapmz = perversityMap(ICm, ICz)

o17 = CombinatorialSheafMap{...}

o17 : CombinatorialSheafMap

The induced map from H^*(X) to IH^*(X) is

i18 : time mapIHmz = hypercohomology mapmz
     -- used 109.86 seconds

             1              1
o18 = -6 : QQ  <--------- QQ  : -6
                  | 1 |
      
      -5 : 0 <----- 0 : -5
                0
      
             5                      5
      -4 : QQ  <----------------- QQ  : -4
                  | 1 0 0 0 0 |
                  | 0 1 0 0 0 |
                  | 0 0 1 0 0 |
                  | 0 0 0 1 0 |
                  | 0 0 0 0 1 |
      
                      2
      -3 : 0 <----- QQ  : -3
                0
      
             5              1
      -2 : QQ  <--------- QQ  : -2
                  | 0 |
                  | 1 |
                  | 0 |
                  | 1 |
                  | 1 |
      
      -1 : 0 <----- 0 : -1
                0
      
            1              1
      0 : QQ  <--------- QQ  : 0
                 | 1 |

o18 : ChainComplexMap

The kernel is the part of H^*(X) which is not in the operational Chow
cohomology.  ("prune" takes the objects which Macaulay 2 produces,
which are often subquotients of other objects, and makes them easier
to read.  The value of oo is the previous output.)

i19 : time prune kernel oo
     -- used 8.63 seconds

                             2
o19 = 0  <-- 0  <-- 0  <-- QQ  <-- 0  <-- 0  <-- 0
                                                 
      -6     -5     -4     -3      -2     -1     0

o19 : ChainComplex

The quotient of H^*(X) by this kernel is isomorphic to the operational
Chow cohomology.  The kernel is an ideal, so we can get the ring
structure on operational Chow cohomology as a quotient ring, after we
have computed the cohomology ring structure itself.  With some
modifications, Sheafhom could compute the weight decomposition and
could obtain the operational Chow cohomology directly as a subring of
H^*(X).

%%%%%%%%%%%%%%% INTERSECTION PAIRINGS %%%%%%%%%%%%%%%

If a fan is made up of cones over the faces of a convex polytope P
which is simplicial (all P's faces are simplices), the associated
toric variety Y is projective and (essentially) smooth.  In turn, the
geometry of such Y's leads to a classification of all simplicial
convex polytopes.  Stanley's proof of the necessity of McMullen's
Conjecture, which classifies the numbers of faces of simplicial convex
polytopes, turned on the fact that H^*(Y) is a ring generated by H^2
for which Poincare duality and Hard Lefschetz hold.

If P is not simplicial, the corresponding H^*(Y) is a ring, but it is
not generated by H^2, and the other conditions also fail.  However,
IH^*(Y) satisfies Poincare Duality and Hard Lefschetz.  So it tempting
to look for natural ring structures on IH^*(Y) that are generated by
IH^2.  This part of the tutorial explores the failure of one attempt
to find such a ring structure.

Whenever p, q and r are perversities with p + q less than or equal to
r, there is a natural intersection pairing between IHp^*(Y) and
IHq^*(Y), taking values in IHr^*(Y).  This generalizes the cup and cap
product.  For instance, there is a pairing between middle-perversity
IH^*(Y) and itself which takes values in the top-perversity IHt^*(Y).
Recall that IHt^*(Y) is just ordinary homology, up to a duality, in
the orientable case: IHt^i(Y) is isomorphic to H_{2n-i}(Y).

There is also the canonical map from IH^*(Y) to IHt^*(Y).  A "natural"
ring structure on IH^*(Y) would, as a necessary condition, have to
provide (for each i,j) a vertical arrow making the following diagram
commute:

      IH^i(Y) tensor IH^j(Y)
                .            \
		.             \
		.              \ pairing
		.               \
		.                \
		v                 v
		        mapIHtm
	   IH^{i+j}(Y)  ------->  IHt^{i+j}(Y)
	   
We can use Sheafhom to show that, unfortunately, no vertical arrow
exists in general that makes this triangle commute and simultaneously
satisfies the associative law.

First, let's compute the top-perversity intersection cohomology and
set the variable IHtX equal to it.

i20 : ICt = ictvSheaf (octah, Perversity => topPerversity)

o20 = IctvSheaf{...}

o20 : IctvSheaf

i21 : IHtX = hypercohomology ICt

        1              1       2       5              1
o21 = QQ  <-- 0  <-- QQ  <-- QQ  <-- QQ  <-- 0  <-- QQ
                                                    
      -6      -5     -4      -3      -2      -1     0

o21 : ChainComplex

As we've said, this is dual to the ordinary homology: to get its Betti
numbers, write the Betti numbers of the homology (or cohomology)
backwards.  Recall that the cohomology was

i22 : HX

        1              5       2       1              1
o22 = QQ  <-- 0  <-- QQ  <-- QQ  <-- QQ  <-- 0  <-- QQ
                                                    
      -6      -5     -4      -3      -2      -1     0

o22 : ChainComplex

Here is the canonical map from middle perversity to top perversity, at
the sheaf level:

i23 : maptm = perversityMap(ICt, ICm)

o23 = CombinatorialSheafMap{...}

o23 : CombinatorialSheafMap

...and on intersection cohomology:

i24 : mapIHtm = hypercohomology maptm

             1              1
o24 = -6 : QQ  <--------- QQ  : -6
                  | 1 |
      
      -5 : 0 <----- 0 : -5
                0
      
             1                       5
      -4 : QQ  <------------------ QQ  : -4
                  | 0 0 -1 1 0 |
      
             2
      -3 : QQ  <----- 0 : -3
                  0
      
             5                      5
      -2 : QQ  <----------------- QQ  : -2
                  | 1 0 0 0 0 |
                  | 0 1 0 0 0 |
                  | 0 0 1 0 0 |
                  | 0 0 0 1 0 |
                  | 0 0 0 0 1 |
      
      -1 : 0 <----- 0 : -1
                0
      
            1              1
      0 : QQ  <--------- QQ  : 0
                 | 1 |

o24 : ChainComplexMap

We now compute the pairing map from IH^*(X) tensor IH^*(X) to
IHt^*(X).  Let T be the tensor product of sheaves ICm tensor ICm.  The
function pairingIH sets up the pairing at the sheaf level as a
morphism from T to ICt.  It then passes to hypercohomology, and uses
the Kunneth formula to write the hypercohomology of T as IH^*(X)
tensor IH^*(X).

i25 : time Pmm = pairingIH(ICt, ICm, ICm)
     -- used 1162.52 seconds

                       1
o25 = -12 : 0 <----- QQ  : -12
                 0
      
      -11 : 0 <----- 0 : -11
                 0
      
                       10
      -10 : 0 <----- QQ   : -10
                 0
      
      -9 : 0 <----- 0 : -9
                0
      
                      35
      -8 : 0 <----- QQ   : -8
                0
      
      -7 : 0 <----- 0 : -7
                0
      
             1                                                                                                                                                                                                            52
      -6 : QQ  <------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- QQ   : -6
                  | 1 -1/-2 -1/-2 0 1/-2 0 0 -1/-2 0 1/-2 0 0 0 0 1/-2 0 -1/-2 -1/-2 -1/-2 0 0 0 0 -1/-2 -1/-2 1/-2 -1/-2 0 0 -1/-2 0 -1/-2 -1/-2 0 -1/-2 0 0 0 0 -1/-2 -1/-2 1/-2 1/-2 1/-2 0 -1/-2 0 0 0 0 1/-2 1 |
      
      -5 : 0 <----- 0 : -5
                0
      
             1                                                                                                                              35
      -4 : QQ  <------------------------------------------------------------------------------------------------------------------------- QQ   : -4
                  | 0 0 -1 1 0 1/2 0 0 1/-2 0 0 0 0 1/-2 1/-2 0 0 1/2 0 1/-2 -1/2 1/-2 0 -1/-2 1/-2 0 1/-2 1/-2 1/-2 -1/-2 0 0 -1 1 0 |
      
             2
      -3 : QQ  <----- 0 : -3
                  0
      
             5                                10
      -2 : QQ  <--------------------------- QQ   : -2
                  | 1 0 0 0 0 1 0 0 0 0 |
                  | 0 1 0 0 0 0 1 0 0 0 |
                  | 0 0 1 0 0 0 0 1 0 0 |
                  | 0 0 0 1 0 0 0 0 1 0 |
                  | 0 0 0 0 1 0 0 0 0 1 |
      
      -1 : 0 <----- 0 : -1
                0
      
            1              1
      0 : QQ  <--------- QQ  : 0
                 | 1 |

o25 : ChainComplexMap

(This is the most demanding computation in the tutorial, together with
the cup product computation below.  On Littlewood, the resident size
peaked at 106M, and was 95M after a final garbage collection.  We will
free up some of the memory below.)

The result is hard to read at first, since the k'th term of the source
is a direct sum of IH^i tensor IH^j over all i,j with i + j = k.
Let's find the restriction of the pairing to IH^2 ** IH^2, which
should take values in IHt^4.  (The ** is Macaulay 2's symbol for
tensor.)

i26 : pairing(Pmm, 2, 2)

o26 = | 1/2 0 0 1/-2 0 0 0 0 1/-2 1/-2 0 0 1/2 0 1/-2 -1/2 1/-2 0 -1/-2 1/-2 0 1/-2 1/-2 1/-2 -1/-2 |

               1        25
o26 : Matrix QQ  <--- QQ

This is a map from (QQ^5 ** QQ^5) to QQ, and it is commutative since
the 2 in "IH^2" is even, so it is really a binary quadratic form.  The
numbers shown are the matrix of this quadratic form written out in row
major order; the quadratic form is really

    |  1  0  0 -1  0 |
    |  0  0  0 -1 -1 |
1/2 |  0  0  1  0 -1 |
    | -1 -1  0  1 -1 |
    |  0 -1 -1 -1  1 |
    
Exercise 1a: Now that we know the two solid arrows in the triangular
diagram above, write down the family of all vertical arrows that make
the triangular diagram commute, and show that they all lead to
products on IH^*(X) that violate associativity.

Exercise 1b: automate this process, using Macaulay 2's functions in
the category of QQ-vector spaces.  For instance, Hom can be used to
construct families of maps.

Note: I have solved Exercise 1a for a simpler toric variety, the cone
on the quadric hypersurface.  For this variety, there were indeed no
associative products compatible with the triangular diagram.  As soon
as I attempt it for octah, I will replace Exercise 1a with a statement
of its answer.

When p is the zero perversity, p + q is always q, so intersection
cohomology in any perversity is a module over the cohomology H^*(X).
For instance, IH^*(X) is a module over H^*(X).  The module structure,
as a morphism from H^*(X) tensor IH^*(X) to IH^*(X), can be computed
by

   Pzm = pairingIH(ICm, ICz, ICm)

The action of H^2(X) on IH^2(X), which takes values in IH^4(X), would
be the map from (QQ^1 ** QQ^5) to QQ^5 given by

   pairing(Pzm, 2, 2)

As a special case of all these pairings, we can compute the ring
structure (cup product) on H^*(X).  First, we clear up a little
memory.  clearAll() removes the definitions of all the output lines
"o..."  Variables holding big objects can be reset to null values if
they're no longer necessary.

i27 : clearAll()

i28 : Pmm = ()

o28 = ()

o28 : Sequence

Here is the cup product on H^*(X):

i29 : time Pzz = pairingIH(ICz, ICz, ICz)
     -- used 1494.99 seconds

                       1
o29 = -12 : 0 <----- QQ  : -12
                 0
      
      -11 : 0 <----- 0 : -11
                 0
      
                       10
      -10 : 0 <----- QQ   : -10
                 0
      
                      4
      -9 : 0 <----- QQ  : -9
                0
      
                      27
      -8 : 0 <----- QQ   : -8
                0
      
                      20
      -7 : 0 <----- QQ   : -7
                0
      
             1                                                          16
      -6 : QQ  <----------------------------------------------------- QQ   : -6
                  | 1 0 0 1/-2 -1/-2 0 0 0 0 0 0 0 1/-2 -1/-2 0 1 |
      
                      4
      -5 : 0 <----- QQ  : -5
                0
      
             5                                      11
      -4 : QQ  <--------------------------------- QQ   : -4
                  | 1 0 0 0 0 -1/-2 1 0 0 0 0 |
                  | 0 1 0 0 0 1/-2  0 1 0 0 0 |
                  | 0 0 1 0 0 1     0 0 1 0 0 |
                  | 0 0 0 1 0 -1    0 0 0 1 0 |
                  | 0 0 0 0 1 -1/-2 0 0 0 0 1 |
      
             2                    4
      -3 : QQ  <--------------- QQ  : -3
                  | 1 0 1 0 |
                  | 0 1 0 1 |
      
             1                2
      -2 : QQ  <----------- QQ  : -2
                  | 1 1 |
      
      -1 : 0 <----- 0 : -1
                0
      
            1              1
      0 : QQ  <--------- QQ  : 0
                 | 1 |

o29 : ChainComplexMap

The cup product between H^2 and H^4, taking values in H^6, would be
given by

i30 : pairing(Pzz, 2, 4)

o30 = | 0 0 1/-2 -1/-2 0 |

                1        5
o30 : Matrix QQ  <--- QQ

Exercise 2: Since H^2(X) = Pic(X) has dimension 1, and the variety is
projective, the generator for H^2(X) is (up to a scalar multiple) the
Lefschetz hyperplane class omega.  Using Pzz and Pzm, figure out the
maps from H^i(X) to H^{i+2}(X), and from IH^i(X) to IH^{i+2}(X), given
by multiplication by omega.  Show that these maps send IH^0 into IH^2
injectively, IH^2 to IH^4 isomorphically, and IH^4 onto IH^6
surjectively; this is what Hard Lefschetz asserts in this case.  Show
that Hard Lefschetz fails for H^*(X).

Hints for Exercise 2: the following Macaulay 2 code defines a map of
chain complexes that injects omega into HX.  Next, read the help files
on quotientMapFromPairing and pairingQuotientMap.

omegaSource = new ChainComplex;
omegaSource.ring = QQ;
omegaSource#-2 = QQ^1;
omega = new ChainComplexMap;
omega.degree = 0;
omega.source = omegaSource;
omega.target = HX;
assert(1 == rank HX_-2);
omega#-2 = map(HX_-2, omegaSource#-2, 1);

%%%%%%%%%%%%%%% NON-STANDARD PERVERSITIES %%%%%%%%%%%%%%%

You can compute intersection cohomology in any perversity p.  Just
define p, in the Macaulay 2 language, to be a function on the integers
2, 3, 4, ...up to the real dimension of Y.  The rules for a perversity
are that p(2) must be 0, and p(k+1) must be either p(k) or p(k)+1.
For complex varieties, only the even integers will be used: the value
of p(2i) affects intersection chains that meet the strata of complex
codimension i.

Here is a perversity that might be interesting to use with a
4-dimensional variety X4.  It differs from middle perversity only at
k = 6.

   p6 = k -> (
        if k == 6 then 3
        else middlePerversity k)

Compute the intersection cohomology with perversity p6 as usual:

   ICp6 = ictvSheaf(fanForX4, Perversity => p6)

   IHp6 = hypercohomology ICp6

If ICm is the middle-perversity IC sheaf for X4, the canonical map

   hypercohomology perversityMap(ICp6, ICm)

from IHm to IHp6 fits into a long exact sequence, the obstruction
sequence, whose third term gives information specifically about the
singularities in complex codimension 3.

%%%%%%%%%%%%%%% COMBINATORIAL INVARIANTS %%%%%%%%%%%%%%%

If we deform the cones of a fan without changing the combinatorics of
how the cones meet, we get what is known as a combinatorially
equivalent fan.  We call something a combinatorial invariant if it has
the same value for any pair of combinatorially equivalent fans.  When
all the cones in the fan are simplicial, so that the varieties are
essentially smooth, the cohomology Betti numbers rank(H^i) are
combinatorial invariants.  For any fan, simplicial or not--i.e.,
whether or not the variety is smooth--the middle-perversity Betti
numbers rank(IH^i) are combinatorial invariants.  However, examples of
McConnell and of Markus Eikelberg show that the cohomology is not a
combinatorial invariant in the singular case.

Let's generate a quick example.  The fan octah was based on the rays
through eight vectors, the first of which was v0:

i31 : v0

o31 = {1, 1, 1}

o31 : List

Let's bend this a little:

i32 : bentv0 = {2, 1, 1}

o32 = {2, 1, 1}

o32 : List

We copy the code that defined octah, changing v0 to bentv0 and leaving
the other vectors alone.  This produces a combinatorially equivalent
fan called bentOctah.

i33 : bentOctah = fan {
  cone{bentv0,v1,v2,v3}, cone{bentv0,v1,v4,v5}, cone{bentv0,v2,v4,v6},
  cone{v1,v3,v5,v7}, cone{v2,v3,v6,v7}, cone{v4,v5,v6,v7}
  }
                  
o33 = set {set {{1, -1, -1}, {0, 0, 0}}, set {{-1, -1, 1}, {0, 0, 0}}, set {{-1, 1, 1}, {-1, 1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {1, -1, -1}, {0, 0, 0}}, set {{1, 1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{1, 1, -1}, {0, 0, 0}, {2, 1, 1}}, set {{-1, 1, 1}, {0, 0, 0}, {2, 1, 1}}, set {{-1, 1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {0, 0, 0}}, set {{-1, -1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {-1, -1, -1}, {-1, 1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {-1, -1, -1}, {1, -1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {-1, -1, -1}, {1, -1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, -1, -1}, {0, 0, 0}}, set {{-1, 1, -1}, {0, 0, 0}}, set {{0, 0, 0}}, set {{0, 0, 0}, {2, 1, 1}}, set {{-1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {1, -1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {0, 0, 0}, {2, 1, 1}}, set {{1, -1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {1, -1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {1, 1, -1}, {2, 1, 1}, {1, -1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, 1, -1}, {2, 1, 1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, -1, 1}, {2, 1, 1}, {-1, -1, 1}, {0, 0, 0}}}

o33 : Fan

Here is the cohomology of the toric variety for bentOctah:

i34 : hypercohomology ictvSheaf(bentOctah, Perversity => zeroPerversity)

        1              5       1                     1
o34 = QQ  <-- 0  <-- QQ  <-- QQ  <-- 0  <-- 0  <-- QQ
                                                   
      -6      -5     -4      -3      -2     -1     0

o34 : ChainComplex

It differs from the cohomology for octah in that H^2 and H^3 are
1 dimension smaller than they used to be:

i35 : HX

        1              5       2       1              1
o35 = QQ  <-- 0  <-- QQ  <-- QQ  <-- QQ  <-- 0  <-- QQ
                                                    
      -6      -5     -4      -3      -2      -1     0

o35 : ChainComplex

Since H^2 = Pic for bentOctah is zero, this variety cannot be
projective.  Thus "being a projective toric variety" is not a
combinatorial invariant.  Examples based on the rhombododecahedron
show that, even when two combinatorially equivalent fans give
projective varieties, the Betti numbers for H^* may not be
combinatorially invariant.

Exercise 3: Show that there is no polyhedron in R^3 that's
combinatorially equivalent to the cube and that has its 8 vertices
respectively on the 8 rays generated by bentv0, v1, v2, ..., v7.  No
matter how you try to deform the cube that octah started from, some
face will end up not being flat.  This is equivalent to saying the
variety for bentOctah is not projective.

%%%%%%%%%%%%%%% PERVERSE SHEAVES %%%%%%%%%%%%%%%

"Perverse sheaves are neither sheaves nor perverse."  On any
stratified space Y, the middle-perversity IC sheaf ICm is a complex of
sheaves, not just a sheaf.  It is uniquely characterized by a list of
axioms; the key axioms are that the stalk cohomology of ICm at a point
y vanishes outside a range of degrees determined by the codimension of
y's stratum, and that the compactly-supported stalk cohomology of ICm
at y vanishes outside the dual range of degrees.  A perverse sheaf on
Y is a complex of sheaves satisfying the same set of axioms, except
that the "range of degrees" is relaxed by 1.

Perverse sheaves are important because of their connection to analysis
(holonomic D-modules, via the Riemann-Hilbert correspondence) as well
as to topology.  One striking feature is that the category of perverse
sheaves is much nicer than the derived category in which it sits.
Perverse sheaves form an abelian category, meaning there are
definitions there for kernels, cokernels, the usual notions of
exactness, addition of morphisms, and direct sums.  The irreducible
objects (objects with no proper sub- or quotient-objects) are exactly
the middle-perversity intersection cohomology sheaves supported on a
stratum of Y, with coefficients in an irreducible local system on the
interior of that stratum, and with a degree shift.

The logarithmic and sublogarithmic perversities are the highest
(resp., lowest) perversities such that the intersection cohomology
sheaves will be perverse sheaves in general.  They are, resp., middle
perversity + 1 and middle perversity - 1 (except that the value at 2
is 0).  For three-dimensional toric varieties like our X,
sublogPerversity and zeroPerversity give the same results.

This suggests we should play with the canonical map mapmz that we
defined above from ICz to ICm.  This will be our first time working
with the sheaves for their own sake, not just with their
hypercohomology.

PROBLEM: Find the irreducible pieces of ICz in the category of
         perverse sheaves.  Decide whether ICz is a direct sum
	 of irreducibles.

Here is an overview of the solution.  Since ICm is irreducible, the
cokernel of mapmz is either zero or all of ICm.  We will find that the
cokernel is zero, so that we have a short exact sequence in the
category of perverse sheaves, where K is the kernel of mapmz.

                               mapmz
       0 -----> K -----> ICz --------> ICm -----> 0
       
Saying that mapmz is an epimorphism seems strange at first, because,
as we will see, it is not surjective on the cohomology of the stalks
in some cases.  In the category of sheaves, a map is an epimorphism
iff it is an epimorphism on stalks.  But we are in the derived
category of complexes of sheaves, and stalk cohomology does not always
behave as intuition with the stalks themselves would suggest.
       
The perverse sheaf K will be supported entirely on the six singular
points of X corresponding to the six vertices of the octahedron.  It
is a direct sum of six irreducible perverse sheaves, each zero except
for a copy of Q at just one of the singular points.  Thus we will have
completely determined the composition series of ICz in the category of
perverse sheaves.  We will also show that mapmz is not a split
epimorphism.  Thus ICz is not a direct sum of irreducibles: it has ICm
as a quotient but not a direct summand.

Doing the calculations will be easier than describing them.  Here is
the cokernel.

i36 : time C = cokernel mapmz
     -- used 94.57 seconds

o36 = CombinatorialSheaf{...}

o36 : CombinatorialSheaf

The easiest way to see if a complex of sheaves is zero is to look at
the stalks.  Let's go over how Sheafhom represents complexes of
sheaves, with this excerpt from the help files.

i37 : help CombinatorialSheaf
 
Documentation for CombinatorialSheaf:
 
'CombinatorialSheaf' -- the class of combinatorial sheaves.
 
A combinatorial sheaf 'F' is an object of class 'MutableHashTable' with
at least the following three slots:
   (.) 'F.rp', which is of class 'RankedPoset';
   (.) 'F.verts', a mutable hash table keyed by the elements in 'F.rp';
   (.) 'F.edges', a mutable hash table keyed by the pairs '(tau,sigma)'
       where 'tau' and 'sigma' are elements in 'F.rp' with 'sigma < tau'
       and consecutive rank.
 
'F.rp' is thought of as having the topology generated by the basis
'openStar(sigma,F.rp)', for all 'sigma' in 'F.rp'.  The space of sections of
the sheaf over 'U = openStar(sigma,F.rp)' is the same as the stalk at
'sigma', since 'U' is the smallest open set containing 'sigma'.  This stalk
is computed by 'stalk(sigma,F)', and is stored in '(F.verts)#sigma'.  If
'sigma < tau', then 'openStar(sigma,F.rp)' contains 'openStar(tau,F.rp)',
so there is a restriction map in the sheaf, and hence a map from
'stalk(sigma,F)' to 'stalk(tau,F)'.  The latter maps are also computed by
'stalk(sigma,F)', and are stored in '(F.edges)#(tau,sigma)'.
 
It is assumed that the whole arrangement is functorial: given any two
chains in the poset with the same initial and terminal points, the
compositions of the morphisms along the chains should be equal.
(These compositions are found using 'internalMap'.)  It is taken for
granted that 'F' is a sheaf rather than just a presheaf.
 
WARNING: the current code assumes that all the minimal elements of 'F.rp'
have the same rank (namely, 0).  For toric varieties, for example, this
condition will be met if we use complete fans, or if the union of
the interiors of the codimension-0 and codimension-1 cones in the 
fan is connected.
 
A complex of sheaves is constructed as a sheaf of complexes: every element
of 'F.verts' is of class 'ChainComplex', and every element of 'F.edges' is
of class 'ChainComplexMap'.
 
There will also be a slot 'F.globalSectionsWithEdgeMorphisms',
after this is requested the first time by the functions
'globalSectionsWithEdgeMorphisms' or 'globalSections'.
 
See also 'CombinatorialSheafMap', 'hypercohomology', 'stalkCohomology', 'kernelMap', 'cokernelMap', 'stalk', '(rank,Thing,RankedPoset)', and 'openStar'.
 


We print out all the stalks in the cokernel sheaf using the values
function.

i38 : values C.verts

o38 = {0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0, 0  <-- 0  <-- 0  <-- 0  <-- 0  <-- 0}

       -4     -3     -2     -1     0  -4     -3     -2     -1     0  -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -4     -3     -2     -1     0  -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -6     -5     -4     -3     -2     -1     0  -6     -5     -4     -3     -2     -1     0  -6     -5     -4     -3     -2     -1     0  -6     -5     -4     -3     -2     -1     0  -6     -5     -4     -3     -2     -1     0  -6     -5     -4     -3     -2     -1     0  -4     -3     -2     -1     0  -4     -3     -2     -1     0  -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0

o38 : List

They're all zero, so mapmz is an epimorphism.

Now let's find the kernel of mapmz.

i39 : K = kernel mapmz

o39 = CombinatorialSheaf{...}

o39 : CombinatorialSheaf

Here are the stalks of K.

i40 : values K.verts

                                                                                                                                                                                                                                                                                                                                                                                                                             1                                             1                                             1                                             1                                             1                                             1
o40 = {}

       -4     -3     -2     -1     0  -4     -3     -2     -1     0  -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -4     -3     -2     -1     0  -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -6     -5     -4     -3      -2     -1     0  -6     -5     -4     -3      -2     -1     0  -6     -5     -4     -3      -2     -1     0  -6     -5     -4     -3      -2     -1     0  -6     -5     -4     -3      -2     -1     0  -6     -5     -4     -3      -2     -1     0  -4     -3     -2     -1     0  -4     -3     -2     -1     0  -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0  -5     -4     -3     -2     -1     0

o40 : List

Six of the stalks are non-zero.  Let's list the cones in the fan, in
the corresponding order:

i41 : keys K.verts

o41 = {set {{-1, -1, 1}, {0, 0, 0}}, set {{1, -1, -1}, {0, 0, 0}}, set {{1, 1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {-1, 1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {1, -1, -1}, {0, 0, 0}}, set {{1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {1, 1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {1, 1, -1}, {1, 1, 1}, {1, -1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, 1, -1}, {1, 1, 1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{-1, 1, 1}, {-1, -1, -1}, {-1, 1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, -1, 1}, {-1, -1, -1}, {1, -1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {-1, -1, -1}, {1, -1, -1}, {-1, 1, -1}, {0, 0, 0}}, set {{-1, -1, -1}, {0, 0, 0}}, set {{-1, 1, -1}, {0, 0, 0}}, set {{0, 0, 0}}, set {{-1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {1, -1, -1}, {0, 0, 0}}, set {{1, -1, 1}, {0, 0, 0}}, set {{-1, -1, -1}, {1, -1, -1}, {0, 0, 0}}, set {{-1, -1, -1}, {-1, -1, 1}, {0, 0, 0}}, set {{-1, 1, 1}, {1, 1, 1}, {0, 0, 0}}, set {{1, 1, -1}, {1, 1, 1}, {0, 0, 0}}}

o41 : List

A little checking shows that the stalks are non-zero precisely at the
3-dimensional cones, which correspond to the vertices of the
octahedron and the singular points of X.  It suffices to check the
stalk at just one of these six cones, the cone sigma0 = cone{v0,v1,v2,v3}
we defined earlier.

i42 : sigma0

o42 = set {{-1, 1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, -1, 1}}

o42 : Cone

Actually, the zero vector has been added to all the cones in the fan,
so we must add it in, too.

i43 : sigma00 = cone{{-1, 1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}

o43 = set {{-1, 1, 1}, {1, -1, 1}, {1, 1, 1}, {-1, -1, 1}, {0, 0, 0}}

o43 : Cone

Here is the stalk at this singular point.

i44 : stalk(sigma00, ICz)

        1       4       9       10       7       3       1
o44 = QQ  <-- QQ  <-- QQ  <-- QQ   <-- QQ  <-- QQ  <-- QQ
                                                       
      -6      -5      -4      -3       -2      -1      0

o44 : ChainComplex

Since the intersection cohomology sheaf on a single point stratum is
just QQ, we find that this stalk is giving us another irreducible
perverse sheaf, the intersection cohomology sheaf supported on the
singular point stratum for sigma0, with the local system QQ, shifted
in degree by 3.  (As required by the perverse sheaf conditions, 3 is
halfway between 0 and 6.)  The same holds for the other 3-dimensional
cones.  Thus K is the direct sum of six irreducible perverse sheaves,
each supported on a singular point.

The map mapmz was an epimorphism because ICz and ICm are complexes of
injective sheaves on the fan.  Injective sheaves are usually
infinite-dimensional objects, but the fan has only finitely many
points, so injective sheaves over Q in Sheafhom are objects we can
handle.  (Even over Z, the sheaves in ICz and ICm are still flabby.)
To explore what we noted above, let's show that the map that mapmz
induces on stalk cohomology is actually injective at the singular
point for sigma0.  It suffices to look at the stalk map of mapmz at
sigma0, which is a map of chain complexes, and to take its cohomology.
HH is Macaulay 2's functor for (co)homology of complexes.

i45 : prune HH stalkMap(sigma00, mapmz)

o45 = -6 : 0 <----- 0 : -6
                0
      
      -5 : 0 <----- 0 : -5
                0
      
      -4 : 0 <----- 0 : -4
                0
      
      -3 : 0 <----- 0 : -3
                0
      
             1
      -2 : QQ  <----- 0 : -2
                  0
      
      -1 : 0 <----- 0 : -1
                0
      
            1              1
      0 : QQ  <--------- QQ  : 0
                 | 1 |

o45 : ChainComplexMap

This is non-surjective in degree 2.

Finally, this last computation also shows that mapmz is not split.
Assume there were a morphism of sheaves, say s, from ICm to ICz such
that the composition (mapmz * s) were the identity on ICm, even up to
quasi-isomorphism.  The composition would induce the identity on stalk
cohomology.  Hence the map that mapmz induced on stalk cohomology at
sigma0 would have to be surjective.  But we have just seen this
surjectivity fails.

